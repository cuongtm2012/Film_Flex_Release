Target path
/etc/systemd/system/pm2-root.service
Command list
[ 'systemctl enable pm2-root' ]
[PM2] Writing init configuration in /etc/systemd/system/pm2-root.service
[PM2] Making script booting at startup...
[PM2] [-] Executing: systemctl enable pm2-root...
[PM2] [v] Command successfully executed.
+---------------------------------------+
[PM2] Freeze a process list on reboot via:
$ pm2 save

[PM2] Remove init script via:
$ pm2 unstartup systemd
2025-05-06 22:27:19 - Updating systemd service...
2025-05-06 22:27:21 - Application deployed successfully!
Your FilmFlex application is now accessible at:
  http://localhost:5000
  http://10.25.59.165:5000
2025-05-06 22:27:21 - Deployment script completed successfully!
For more information on managing your FilmFlex deployment, see DEPLOYMENT.md
root@lightnode:~/Film_Flex_Release/scripts/deployment# curl http://localhost:5000/api/health
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1" />
    <script type="module" crossorigin src="/assets/index-DjUPru3R.js"></script>
    <link rel="stylesheet" crossorigin href="/assets/index-BqfWuDaE.css">
  </head>
  <body>
    <div id="root"></div>
    <!-- This is a replit script which adds a banner on the top of the page when opened in development mode outside the replit environment -->
    <script type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js"></script>
  </body>
root@lightnode:~/Film_Flex_Release/scripts/deployment# # Check the PM2 error logsor logs
pm2 logs filmflex --err --lines 50

# Also check the out logs
pm2 logs filmflex --out --lines 50

# Check the application log files directly
cat /var/log/filmflex/error.log | tail -50
cat /var/log/filmflex/out.log | tail -50

# Check the Nginx error logs if you're using Nginx
cat /var/log/nginx/error.log | tail -50
[TAILING] Tailing last 50 lines for [filmflex] process (change the value with --lines option)
/var/log/filmflex/error.log last 50 lines:
0|filmflex |     syscall: 'connect',
0|filmflex |     address: '127.0.0.1',
0|filmflex |     port: 443
0|filmflex |   },
0|filmflex |   [Symbol(kMessage)]: 'connect ECONNREFUSED 127.0.0.1:443'
0|filmflex | }
0|filmflex | 2025-05-06T22:29:51: Error fetching movies: ErrorEvent {
0|filmflex |   [Symbol(kTarget)]: WebSocket {
0|filmflex |     _events: [Object: null prototype] {
0|filmflex |       error: [Function],
0|filmflex |       message: [Function],
0|filmflex |       close: [Function],
0|filmflex |       open: [Function]
0|filmflex |     },
0|filmflex |     _eventsCount: 4,
0|filmflex |     _maxListeners: undefined,
0|filmflex |     _binaryType: 'arraybuffer',
0|filmflex |     _closeCode: 1006,
0|filmflex |     _closeFrameReceived: false,
0|filmflex |     _closeFrameSent: false,
0|filmflex |     _closeMessage: <Buffer >,
0|filmflex |     _closeTimer: null,
0|filmflex |     _errorEmitted: true,
0|filmflex |     _extensions: {},
0|filmflex |     _paused: false,
0|filmflex |     _protocol: '',
0|filmflex |     _readyState: 3,
0|filmflex |     _receiver: null,
0|filmflex |     _sender: null,
0|filmflex |     _socket: null,
0|filmflex |     _bufferedAmount: 0,
0|filmflex |     _isServer: false,
0|filmflex |     _redirects: 0,
0|filmflex |     _autoPong: true,
0|filmflex |     _url: 'wss://localhost/v2',
0|filmflex |     _req: null,
0|filmflex |     [Symbol(shapeMode)]: false,
0|filmflex |     [Symbol(kCapture)]: false
0|filmflex |   },
0|filmflex |   [Symbol(kType)]: 'error',
0|filmflex |   [Symbol(kError)]: Error: connect ECONNREFUSED 127.0.0.1:443
0|filmflex |       at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1611:16) {
0|filmflex |     errno: -111,
0|filmflex |     code: 'ECONNREFUSED',
0|filmflex |     syscall: 'connect',
0|filmflex |     address: '127.0.0.1',
0|filmflex |     port: 443
0|filmflex |   },
0|filmflex |   [Symbol(kMessage)]: 'connect ECONNREFUSED 127.0.0.1:443'
0|filmflex | }