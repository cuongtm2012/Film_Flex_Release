import { 
  Movie, InsertMovie, 
  Episode, InsertEpisode, 
  Comment, InsertComment, 
  InsertWatchlist,
  ViewHistory,
  ContentApproval, InsertContentApproval,
  AuditLog, InsertAuditLog,
  Role, InsertRole,
  Permission, InsertPermission,
  RolePermission,
  MovieListResponse,
  MovieDetailResponse,
  users, movies, episodes, comments, watchlist, viewHistory, contentApprovals, auditLogs,
  roles, permissions, rolePermissions,
  UserRole, UserStatus, ContentStatus
} from "@shared/schema";
import { db } from "./db";
import { eq, and, desc, sql } from "drizzle-orm";
import connectPg from "connect-pg-simple";
import session from "express-session";
import { pool } from "./db";

export interface IStorage {
  // User methods
  getUser(id: number): Promise<User | undefined>;
  getUserByUsername(username: string): Promise<User | undefined>;
  createUser(user: InsertUser): Promise<User>;
  updateUser(id: number, userData: Partial<InsertUser>): Promise<User | undefined>;
  changeUserStatus(id: number, status: string): Promise<User | undefined>;
  getAllUsers(page: number, limit: number, filters?: {role?: string, status?: string, search?: string}): Promise<{ data: User[], total: number }>;
  
  // Role methods
  getRole(id: number): Promise<Role | undefined>;
  getRoleByName(name: string): Promise<Role | undefined>;
  getAllRoles(): Promise<Role[]>;
  createRole(role: InsertRole): Promise<Role>;
  updateRole(id: number, roleData: Partial<InsertRole>): Promise<Role | undefined>;
  deleteRole(id: number): Promise<void>;
  
  // Permission methods
  getPermission(id: number): Promise<Permission | undefined>;
  getPermissionByName(name: string): Promise<Permission | undefined>;
  getAllPermissions(): Promise<Permission[]>;
  createPermission(permission: InsertPermission): Promise<Permission>;
  updatePermission(id: number, permissionData: Partial<InsertPermission>): Promise<Permission | undefined>;
  deletePermission(id: number): Promise<void>;
  
  // Role-Permission methods
  assignPermissionToRole(roleId: number, permissionId: number): Promise<RolePermission>;
  removePermissionFromRole(roleId: number, permissionId: number): Promise<void>;
  getPermissionsByRole(roleId: number): Promise<Permission[]>;
  getRolesByPermission(permissionId: number): Promise<Role[]>;
  
  // Movie methods
  getMovies(page: number, limit: number, sortBy?: string): Promise<{ data: Movie[], total: number }>;
  getMovieBySlug(slug: string): Promise<Movie | undefined>;
  getMovieByMovieId(movieId: string): Promise<Movie | undefined>;
  saveMovie(movie: InsertMovie): Promise<Movie>;
  searchMovies(query: string, normalizedQuery: string, page: number, limit: number, section?: string): Promise<{ data: Movie[], total: number }>;
  getMoviesByCategory(categorySlug: string, page: number, limit: number, sortBy?: string): Promise<{ data: Movie[], total: number }>;
  getMoviesBySection(section: string, page: number, limit: number): Promise<{ data: Movie[], total: number }>;
  updateMovieBySlug(slug: string, updateData: Partial<Movie>): Promise<Movie | undefined>;
  
  // Episode methods
  getEpisodesByMovieSlug(movieSlug: string): Promise<Episode[]>;
  getEpisodeBySlug(slug: string): Promise<Episode | undefined>;
  saveEpisode(episode: InsertEpisode): Promise<Episode>;
  
  // Comment methods
  getCommentsByMovieSlug(movieSlug: string, page: number, limit: number): Promise<{ data: Comment[], total: number }>;
  addComment(comment: InsertComment): Promise<Comment>;
  likeComment(commentId: number): Promise<void>;
  dislikeComment(commentId: number): Promise<void>;
  
  // Watchlist methods
  getWatchlist(userId: number): Promise<Movie[]>;
  checkWatchlist(userId: number, movieSlug: string): Promise<boolean>;
  addToWatchlist(watchlistItem: InsertWatchlist): Promise<void>;
  removeFromWatchlist(userId: number, movieSlug: string): Promise<void>;
  
  // View History methods
  getViewHistory(userId: number, limit?: number): Promise<Movie[]>;
  addToViewHistory(userId: number, movieSlug: string, progress?: number): Promise<void>;
  updateViewProgress(userId: number, movieSlug: string, progress: number): Promise<void>;
  getViewedMovie(userId: number, movieSlug: string): Promise<ViewHistory | undefined>;
  
  // Content Approval methods
  submitContentForApproval(approval: InsertContentApproval): Promise<ContentApproval>;
  approveContent(contentId: number, reviewerId: number, comments?: string): Promise<ContentApproval | undefined>;
  rejectContent(contentId: number, reviewerId: number, comments: string): Promise<ContentApproval | undefined>;
  getPendingContent(page: number, limit: number): Promise<{ data: ContentApproval[], total: number }>;
  getContentByUser(userId: number, page: number, limit: number, status?: string): Promise<{ data: ContentApproval[], total: number }>;
  
  // Audit Log methods
  addAuditLog(log: InsertAuditLog): Promise<AuditLog>;
  getAuditLogs(page: number, limit: number, filters?: {activityType?: string, userId?: number}): Promise<{ data: AuditLog[], total: number }>;
  
  // Cache methods
  cacheMovieList(data: MovieListResponse, page: number): Promise<void>;
  cacheMovieDetail(data: MovieDetailResponse): Promise<void>;
  cacheMovieCategory(data: MovieListResponse, categorySlug: string, page: number): Promise<void>;
  getMovieListCache(page: number): Promise<MovieListResponse | null>;
  getMovieDetailCache(slug: string): Promise<MovieDetailResponse | null>;
  getMovieCategoryCache(categorySlug: string, page: number): Promise<MovieListResponse | null>;
  
  // Session store for authentication
  sessionStore: session.Store;
}

export class DatabaseStorage implements IStorage {
  sessionStore: session.Store;

  constructor() {
    const PgSession = connectPg(session);
    this.sessionStore = new PgSession({
      pool,
      tableName: 'sessions',
      createTableIfMissing: true,
      pruneSessionInterval: 60 * 15, // Prune expired sessions every 15 minutes
      errorLog: (error: Error) => {
        console.error('Session store error:', error);
      }
    });
  }

  // Add search and category methods
  async searchMovies(query: string, _normalizedQuery: string, page: number, limit: number, section?: string): Promise<{ data: Movie[], total: number }> {
    const offset = (page - 1) * limit;

    // Convert query to lowercase for case-insensitive search
    const lowercaseQuery = query.toLowerCase();

    // Build search conditions to search across multiple fields with explicit lowercasing
    const searchConditions = sql`(
      LOWER(${movies.name}) LIKE ${`%${lowercaseQuery}%`} OR 
      LOWER(${movies.originName}) LIKE ${`%${lowercaseQuery}%`} OR 
      LOWER(${movies.description}) LIKE ${`%${lowercaseQuery}%`} OR 
      LOWER(${movies.actors}) LIKE ${`%${lowercaseQuery}%`} OR 
      LOWER(${movies.directors}) LIKE ${`%${lowercaseQuery}%`}
    )`;

    let conditions = searchConditions;
    
    // Add section filter if specified
    if (section) {
      conditions = sql`${searchConditions} AND ${movies.section} = ${section}`;
      console.log(`[DEBUG] Adding section filter: ${section} to search query`);
    }

    const baseQuery = db.select()
      .from(movies)
      .where(conditions);

    const data = await baseQuery
      .orderBy(desc(movies.modifiedAt))
      .limit(limit)
      .offset(offset);

    const [{ count }] = await db.select({ count: sql<number>`count(*)` })
      .from(movies)
      .where(conditions);

    return { data, total: count || 0 };
  }

  async getMoviesByCategory(categorySlug: string, page: number, limit: number, sortBy?: string): Promise<{ data: Movie[], total: number }> {
    const baseQuery = db.select()
      .from(movies)
      .where(sql`${movies.categories}::jsonb @> ${`["${categorySlug}"]`}::jsonb`);

    const sortedQuery = sortBy === 'popular'
      ? baseQuery.orderBy(desc(movies.view))
      : baseQuery.orderBy(desc(movies.modifiedAt));

    const data = await sortedQuery
      .limit(limit)
      .offset((page - 1) * limit);

    const [{ count }] = await db.select({ count: sql<number>`count(*)` })
      .from(movies)
      .where(sql`${movies.categories}::jsonb @> ${`["${categorySlug}"]`}::jsonb`);

    return { data, total: count || 0 };
  }

  async getMoviesBySection(section: string, page: number, limit: number): Promise<{ data: Movie[], total: number }> {
    const offset = (page - 1) * limit;
    
    // Query movies by section field
    const data = await db.select()
      .from(movies)
      .where(eq(movies.section, section))
      .orderBy(desc(movies.modifiedAt))
      .limit(limit)
      .offset(offset);
    
    // Count total movies in this section
    const [{ count }] = await db.select({ count: sql<number>`count(*)` })
      .from(movies)
      .where(eq(movies.section, section));
    
    return { data, total: count || 0 };
  }

  async updateMovieBySlug(slug: string, updateData: Partial<Movie>): Promise<Movie | undefined> {
    console.log('[DEBUG] updateMovieBySlug called with:', { slug, updateData });

    // Create the update data object with correct column names
    const dbUpdateData: typeof movies.$inferInsert = {
      // Handle section field - explicitly set to null if undefined
      section: updateData.section ?? null,
      // Handle isRecommended field - ensure it's a boolean with double negation
      isRecommended: !!updateData.isRecommended,
      // Update modification timestamp
      modifiedAt: new Date()
    };

    console.log('[DEBUG] Prepared update data:', dbUpdateData);

    try {
      const [updatedMovie] = await db.update(movies)
        .set(dbUpdateData)
        .where(eq(movies.slug, slug))
        .returning();

      console.log('[DEBUG] Update result:', {
        slug: updatedMovie.slug,
        section: updatedMovie.section,
        isRecommended: updatedMovie.isRecommended
      });
      
      // Clear cache to ensure fresh data on next fetch
      await this.clearMovieDetailCache(slug);
      
      return updatedMovie;
    } catch (error) {
      console.error('[DEBUG] Update failed:', error);
      throw error;
    }
  }

  // Cache implementation - using Redis-like API
  private cache = new Map<string, any>();
  private readonly CACHE_TTL = 5 * 60 * 1000; // 5 minutes in milliseconds

  private getCacheKey(type: string, ...params: any[]): string {
    return `${type}:${params.join(':')}`;
  }

  private async setCache<T>(key: string, data: T): Promise<void> {
    this.cache.set(key, {
      data,
      expiry: Date.now() + this.CACHE_TTL
    });
  }

  private async clearCache(key: string): Promise<void> {
    this.cache.delete(key);
  }

  private async getCache<T>(key: string): Promise<T | null> {
    const cached = this.cache.get(key);
    if (!cached) return null;
    
    if (Date.now() > cached.expiry) {
      this.cache.delete(key);
      return null;
    }

    return cached.data;
  }

  async clearMovieDetailCache(slug: string): Promise<void> {
    const key = this.getCacheKey('movieDetail', slug);
    await this.clearCache(key);
    console.log(`[DEBUG] Cleared cache for movie: ${slug}`);
  }

  async cacheMovieList(data: MovieListResponse, page: number): Promise<void> {
    await this.setCache(this.getCacheKey('movieList', page), data);
  }

  async cacheMovieDetail(data: MovieDetailResponse): Promise<void> {
    // Ensure the section and isRecommended fields are preserved
    if (data && data.movie) {
      // Deep clone to avoid reference issues
      const movieClone = JSON.parse(JSON.stringify(data.movie));
      
      // Ensure section property is correctly typed
      if (movieClone.section === undefined || movieClone.section === null) {
        movieClone.section = null;
      }
      
      // Ensure isRecommended is a proper boolean with double negation
      movieClone.isRecommended = !!movieClone.isRecommended;
      
      console.log(`[DEBUG] Caching movie ${movieClone.slug || 'unknown'} with:`, {
        section: movieClone.section,
        sectionType: typeof movieClone.section,
        isRecommended: movieClone.isRecommended,
        isRecommendedType: typeof movieClone.isRecommended
      });
      
      // Replace the movie object with our fixed version
      data.movie = movieClone;
    }
    
    await this.setCache(this.getCacheKey('movieDetail', data.movie.slug), data);
  }

  async cacheMovieCategory(data: MovieListResponse, categorySlug: string, page: number): Promise<void> {
    await this.setCache(this.getCacheKey('movieCategory', categorySlug, page), data);
  }

  async getMovieListCache(page: number): Promise<MovieListResponse | null> {
    return this.getCache(this.getCacheKey('movieList', page));
  }

  async getMovieDetailCache(slug: string): Promise<MovieDetailResponse | null> {
    return this.getCache(this.getCacheKey('movieDetail', slug));
  }

  async getMovieCategoryCache(categorySlug: string, page: number): Promise<MovieListResponse | null> {
    return this.getCache(this.getCacheKey('movieCategory', categorySlug, page));
  }
}

// Fix export to use named export for storage instance
export const storage = new DatabaseStorage();
