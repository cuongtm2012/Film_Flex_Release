# Final ARM64 Compatible Dockerfile - Based on Multiple GitHub Solutions
FROM node:20-alpine AS production

# Install runtime dependencies
RUN apk add --no-cache dumb-init tini curl

# Create app user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S filmflex -u 1001

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install production dependencies with ARM64 fixes
RUN npm install --only=production --ignore-scripts --legacy-peer-deps && \
    npm cache clean --force && \
    rm -rf ~/.npm /tmp/* /var/cache/apk/*

# Copy pre-built application files (built locally to avoid ARM64 Docker issues)
COPY --chown=filmflex:nodejs dist ./dist
COPY --chown=filmflex:nodejs public ./public
COPY --chown=filmflex:nodejs shared ./shared

# Copy scripts directory for data import functionality
COPY --chown=filmflex:nodejs scripts ./scripts

# Create necessary directories
RUN mkdir -p logs tmp && \
    chown -R filmflex:nodejs logs tmp

# Verify critical files exist
RUN test -f dist/index.js || (echo "Critical file missing: dist/index.js" && exit 1)
RUN test -f scripts/data/import-movies-docker.cjs || (echo "Warning: import script missing" && ls -la scripts/data/ || echo "scripts/data directory missing")

# Switch to non-root user
USER filmflex

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:5000/api/health || exit 1

# Use tini as PID 1 and run the server directly
ENTRYPOINT ["tini", "--"]
CMD ["node", "dist/index.js"]