# Production Dockerfile - Uses pre-built files
FROM node:20-alpine AS production

# Install runtime dependencies
RUN apk add --no-cache dumb-init tini

# Create app user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S filmflex -u 1001

WORKDIR /app

# Copy package files and install production dependencies only
COPY package*.json ./
RUN npm ci --only=production --ignore-scripts && \
    npm cache clean --force && \
    rm -rf ~/.npm

# Copy pre-built application files (built locally)
COPY --chown=filmflex:nodejs dist ./dist
COPY --chown=filmflex:nodejs public ./public
COPY --chown=filmflex:nodejs shared ./shared

# Copy config files
COPY --chown=filmflex:nodejs ecosystem.config.cjs ./

# Create necessary directories
RUN mkdir -p logs tmp && \
    chown -R filmflex:nodejs logs tmp

# Verify critical files exist
RUN test -f dist/index.js || (echo "Critical file missing: dist/index.js" && exit 1)

# Switch to non-root user
USER filmflex

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD node -e "require('http').get('http://localhost:5000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Use tini as PID 1
ENTRYPOINT ["tini", "--"]
CMD ["npm", "start"]