# Vite GitHub Discussion #15532 Solution - ARM64 Compatible Dockerfile
FROM node:20-alpine AS builder

WORKDIR /app

# Install build dependencies
RUN apk add --no-cache python3 make g++ libc6-compat

# Copy package files with ARM64 optionalDependencies fix
COPY package*.json ./

# Use npm install with legacy-peer-deps to handle package-lock.json sync and React dependencies
RUN npm install --legacy-peer-deps --include=optional && npm cache clean --force

# Copy source code
COPY . .

# Build both client and server (should work with WASM fallback)
RUN npm run build:client && npm run build:server

# Verify build artifacts exist
RUN test -f dist/index.js || (echo "Server build failed - index.js not found" && exit 1)

# Production runtime stage
FROM node:20-alpine AS production

# Install runtime dependencies
RUN apk add --no-cache dumb-init tini curl

# Create app user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S filmflex -u 1001

WORKDIR /app

# Copy package files and install production dependencies
COPY package*.json ./
RUN npm ci --only=production --ignore-scripts --legacy-peer-deps || \
    npm install --only=production --ignore-scripts --legacy-peer-deps && \
    npm cache clean --force && \
    rm -rf ~/.npm /tmp/* /var/cache/apk/*

# Copy built application from builder stage
COPY --from=builder --chown=filmflex:nodejs /app/dist ./dist
COPY --from=builder --chown=filmflex:nodejs /app/public ./public
COPY --from=builder --chown=filmflex:nodejs /app/shared ./shared

# Create necessary directories
RUN mkdir -p logs tmp && \
    chown -R filmflex:nodejs logs tmp

# Verify critical files exist
RUN test -f dist/index.js || (echo "Critical file missing: dist/index.js" && exit 1)

# Switch to non-root user
USER filmflex

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:5000/api/health || exit 1

# Use tini as PID 1 and run the server directly
ENTRYPOINT ["tini", "--"]
CMD ["node", "dist/index.js"]