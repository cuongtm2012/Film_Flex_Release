version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: filmflex-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-filmflex}
      POSTGRES_USER: ${POSTGRES_USER:-filmflex}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-filmflex2024}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./shared:/docker-entrypoint-initdb.d
    networks:
      - filmflex-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-filmflex} -d ${POSTGRES_DB:-filmflex}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PhimGG Application
  app:
    build: .
    container_name: filmflex-app
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://${POSTGRES_USER:-filmflex}:${POSTGRES_PASSWORD:-filmflex2024}@postgres:5432/${POSTGRES_DB:-filmflex}
      SESSION_SECRET: ${SESSION_SECRET:-your_session_secret_here}
      ALLOWED_ORIGINS: https://${DOMAIN:-phimgg.com},https://www.${DOMAIN:-phimgg.com}
      CLIENT_URL: https://${DOMAIN:-phimgg.com}
      DOMAIN: ${DOMAIN:-phimgg.com}
      TRUST_PROXY: "true"
    volumes:
      - ./logs:/app/logs
      - ./public:/app/public
    networks:
      - filmflex-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    expose:
      - "5000"

  # Nginx Reverse Proxy
  nginx-proxy:
    image: nginx:alpine
    container_name: filmflex-nginx-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Main nginx configuration (correct mount point)
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      # Site-specific configurations (correct mount point for includes)
      - ./nginx/phimgg.com.conf:/etc/nginx/conf.d/default.conf:ro
      # SSL certificates
      - certbot_conf:/etc/letsencrypt:ro
      - certbot_www:/var/www/certbot:ro
      # Logs
      - nginx_logs:/var/log/nginx
    networks:
      - filmflex-network
    depends_on:
      - app
    environment:
      - TZ=${TZ:-UTC}
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Let's Encrypt SSL Certificate Management
  certbot:
    image: certbot/certbot:latest
    container_name: filmflex-certbot
    volumes:
      - certbot_conf:/etc/letsencrypt
      - certbot_www:/var/www/certbot
      - certbot_logs:/var/log/letsencrypt
    networks:
      - filmflex-network
    environment:
      - TZ=${TZ:-UTC}
    # Auto-renewal every 12 hours without deploy hook (nginx reload handled separately)
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew --webroot --webroot-path=/var/www/certbot --quiet || true; sleep 12h & wait $${!}; done;'"
    restart: unless-stopped
    depends_on:
      - nginx-proxy

networks:
  filmflex-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  nginx_logs:
    driver: local
  certbot_conf:
    driver: local
  certbot_www:
    driver: local
  certbot_logs:
    driver: local